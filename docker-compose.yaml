# Dockerized CI: Jenkins + Docker-in-Docker (DinD)
# - DinD exposes a TLS Docker daemon at tcp://docker:2376
# - Jenkins talks to DinD via DOCKER_HOST
# - Named volumes:
#     jenkins-data       -> Jenkins home (jobs/config/plugins)
#     docker-certs-*     -> TLS certs auto-generated by DinD
#     docker-cache       -> (optional) Docker layer cache inside DinD

services:
  dind:
    image: docker:27.1-dind
    container_name: dind
    privileged: true                   # required for DinD
    user: root
    environment:
      DOCKER_TLS_CERTDIR: /certs
    command: ["--storage-driver=overlay2"]
    networks:
      jenkins:
        aliases: [docker]              # hostname Jenkins will use
    volumes:
      - docker-certs-ca:/certs/ca
      - docker-certs-client:/certs/client
      - docker-cache:/var/lib/docker   # cache image layers

    healthcheck:
      test: ["CMD", "docker", "info"]
      interval: 15s
      timeout: 5s
      retries: 8

  jenkins:
    image: jenkins/jenkins:lts-jdk11
    container_name: jenkins
    depends_on:
      dind:
        condition: service_healthy
    user: root
    restart: unless-stopped
    environment:
      DOCKER_HOST: tcp://docker:2376
      DOCKER_CERT_PATH: /certs/client
      DOCKER_TLS_VERIFY: "1"
    ports:
      - "8081:8080"                    # change to 8080:8080 only if port 8080 is free
      - "50000:50000"
    networks: [jenkins]
    volumes:
      - jenkins-data:/var/jenkins_home
      - docker-certs-client:/certs/client:ro
      - /usr/bin/docker:/usr/bin/docker   # give Jenkins the docker CLI (matches your working setup)

networks:
  jenkins: {}

volumes:
  jenkins-data: {}          # reuse your existing named volume
  docker-certs-ca: {}
  docker-certs-client: {}
  docker-cache: {}          # new, for layer caching

